// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: examples/explains.proto

// https://developers.google.com/protocol-buffers/docs/reference/go-generated

package examples

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 메세지 밖에 있는 enum
type Global_EnumNotAllowingAlias int32

const (
	Global_EnumNotAllowingAlias_Global_UNKNOWNTYPE Global_EnumNotAllowingAlias = 0
	Global_EnumNotAllowingAlias_Global_STARTEDTYPE Global_EnumNotAllowingAlias = 1
)

var Global_EnumNotAllowingAlias_name = map[int32]string{
	0: "Global_UNKNOWNTYPE",
	1: "Global_STARTEDTYPE",
}

var Global_EnumNotAllowingAlias_value = map[string]int32{
	"Global_UNKNOWNTYPE": 0,
	"Global_STARTEDTYPE": 1,
}

func (x Global_EnumNotAllowingAlias) String() string {
	return proto.EnumName(Global_EnumNotAllowingAlias_name, int32(x))
}

func (Global_EnumNotAllowingAlias) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{0}
}

// 어떻게 converting 되는지 궁금함.
type Foo int32

const (
	Foo_UP Foo = 0
)

var Foo_name = map[int32]string{
	0: "UP",
}

var Foo_value = map[string]int32{
	"UP": 0,
}

func (x Foo) String() string {
	return proto.EnumName(Foo_name, int32(x))
}

func (Foo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{1}
}

// 메세지 안에 있는 enum
// enum 타입 같은 경우는 언어 타입에 제한이 있을 수 있음.
// explains.pb.go 로 변환 될때 어떤 struct 로 변환될지 살펴봄.
type ScalaTypes_EnumAllowingAlias int32

const (
	ScalaTypes_UNKNOWN ScalaTypes_EnumAllowingAlias = 0
	ScalaTypes_STARTED ScalaTypes_EnumAllowingAlias = 1
	ScalaTypes_RUNNING ScalaTypes_EnumAllowingAlias = 1
)

var ScalaTypes_EnumAllowingAlias_name = map[int32]string{
	0: "UNKNOWN",
	1: "STARTED",
	// Duplicate value: 1: "RUNNING",
}

var ScalaTypes_EnumAllowingAlias_value = map[string]int32{
	"UNKNOWN": 0,
	"STARTED": 1,
	"RUNNING": 1,
}

func (x ScalaTypes_EnumAllowingAlias) String() string {
	return proto.EnumName(ScalaTypes_EnumAllowingAlias_name, int32(x))
}

func (ScalaTypes_EnumAllowingAlias) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{0, 0}
}

type ScalaTypes_EnumNotAllowingAlias int32

const (
	ScalaTypes_UNKNOWNTYPE ScalaTypes_EnumNotAllowingAlias = 0
	ScalaTypes_STARTEDTYPE ScalaTypes_EnumNotAllowingAlias = 1
)

var ScalaTypes_EnumNotAllowingAlias_name = map[int32]string{
	0: "UNKNOWNTYPE",
	1: "STARTEDTYPE",
}

var ScalaTypes_EnumNotAllowingAlias_value = map[string]int32{
	"UNKNOWNTYPE": 0,
	"STARTEDTYPE": 1,
}

func (x ScalaTypes_EnumNotAllowingAlias) String() string {
	return proto.EnumName(ScalaTypes_EnumNotAllowingAlias_name, int32(x))
}

func (ScalaTypes_EnumNotAllowingAlias) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{0, 1}
}

// if a scalar message field is set to its default, the value will not be serialized on the wire.
// 디폴트로 세팅되어 있는 경우 엔코딩 안됨.
type ScalaTypes struct {
	DoubleVar   float64 `protobuf:"fixed64,1,opt,name=double_var,json=doubleVar,proto3" json:"double_var,omitempty"`
	FloatVar    float32 `protobuf:"fixed32,2,opt,name=float_var,json=floatVar,proto3" json:"float_var,omitempty"`
	Int32Var    int32   `protobuf:"varint,3,opt,name=int32_var,json=int32Var,proto3" json:"int32_var,omitempty"`
	Int64Var    int64   `protobuf:"varint,4,opt,name=int64_var,json=int64Var,proto3" json:"int64_var,omitempty"`
	Uint32Var   uint32  `protobuf:"varint,5,opt,name=uint32_var,json=uint32Var,proto3" json:"uint32_var,omitempty"`
	Uint64Var   uint64  `protobuf:"varint,6,opt,name=uint64_var,json=uint64Var,proto3" json:"uint64_var,omitempty"`
	Sint32Var   int32   `protobuf:"zigzag32,7,opt,name=sint32_var,json=sint32Var,proto3" json:"sint32_var,omitempty"`
	Fixed32Var  uint32  `protobuf:"fixed32,8,opt,name=fixed32_var,json=fixed32Var,proto3" json:"fixed32_var,omitempty"`
	Fixed64Var  uint64  `protobuf:"fixed64,9,opt,name=fixed64_var,json=fixed64Var,proto3" json:"fixed64_var,omitempty"`
	Sfixed32Var int32   `protobuf:"fixed32,10,opt,name=sfixed32_var,json=sfixed32Var,proto3" json:"sfixed32_var,omitempty"`
	Sfixed64Var int64   `protobuf:"fixed64,11,opt,name=sfixed64_var,json=sfixed64Var,proto3" json:"sfixed64_var,omitempty"`
	BoolVar     bool    `protobuf:"varint,12,opt,name=bool_var,json=boolVar,proto3" json:"bool_var,omitempty"`
	StringVar   string  `protobuf:"bytes,13,opt,name=string_var,json=stringVar,proto3" json:"string_var,omitempty"`
	BytesVar    []byte  `protobuf:"bytes,14,opt,name=bytes_var,json=bytesVar,proto3" json:"bytes_var,omitempty"`
	// 아래 코드가 없을때 테스트 해볼 것
	EnumAllowingAliasVar ScalaTypes_EnumAllowingAlias `protobuf:"varint,15,opt,name=EnumAllowingAlias_var,json=EnumAllowingAliasVar,proto3,enum=explains.ScalaTypes_EnumAllowingAlias" json:"EnumAllowingAlias_var,omitempty"`
	// 아래 코드가 없을때 테스트 해볼 것
	EnumNotAllowingAliasVar ScalaTypes_EnumNotAllowingAlias `protobuf:"varint,16,opt,name=EnumNotAllowingAlias_var,json=EnumNotAllowingAliasVar,proto3,enum=explains.ScalaTypes_EnumNotAllowingAlias" json:"EnumNotAllowingAlias_var,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                        `json:"-"`
	XXX_unrecognized        []byte                          `json:"-"`
	XXX_sizecache           int32                           `json:"-"`
}

func (m *ScalaTypes) Reset()         { *m = ScalaTypes{} }
func (m *ScalaTypes) String() string { return proto.CompactTextString(m) }
func (*ScalaTypes) ProtoMessage()    {}
func (*ScalaTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{0}
}
func (m *ScalaTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScalaTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScalaTypes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScalaTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalaTypes.Merge(m, src)
}
func (m *ScalaTypes) XXX_Size() int {
	return m.Size()
}
func (m *ScalaTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalaTypes.DiscardUnknown(m)
}

var xxx_messageInfo_ScalaTypes proto.InternalMessageInfo

func (m *ScalaTypes) GetDoubleVar() float64 {
	if m != nil {
		return m.DoubleVar
	}
	return 0
}

func (m *ScalaTypes) GetFloatVar() float32 {
	if m != nil {
		return m.FloatVar
	}
	return 0
}

func (m *ScalaTypes) GetInt32Var() int32 {
	if m != nil {
		return m.Int32Var
	}
	return 0
}

func (m *ScalaTypes) GetInt64Var() int64 {
	if m != nil {
		return m.Int64Var
	}
	return 0
}

func (m *ScalaTypes) GetUint32Var() uint32 {
	if m != nil {
		return m.Uint32Var
	}
	return 0
}

func (m *ScalaTypes) GetUint64Var() uint64 {
	if m != nil {
		return m.Uint64Var
	}
	return 0
}

func (m *ScalaTypes) GetSint32Var() int32 {
	if m != nil {
		return m.Sint32Var
	}
	return 0
}

func (m *ScalaTypes) GetFixed32Var() uint32 {
	if m != nil {
		return m.Fixed32Var
	}
	return 0
}

func (m *ScalaTypes) GetFixed64Var() uint64 {
	if m != nil {
		return m.Fixed64Var
	}
	return 0
}

func (m *ScalaTypes) GetSfixed32Var() int32 {
	if m != nil {
		return m.Sfixed32Var
	}
	return 0
}

func (m *ScalaTypes) GetSfixed64Var() int64 {
	if m != nil {
		return m.Sfixed64Var
	}
	return 0
}

func (m *ScalaTypes) GetBoolVar() bool {
	if m != nil {
		return m.BoolVar
	}
	return false
}

func (m *ScalaTypes) GetStringVar() string {
	if m != nil {
		return m.StringVar
	}
	return ""
}

func (m *ScalaTypes) GetBytesVar() []byte {
	if m != nil {
		return m.BytesVar
	}
	return nil
}

func (m *ScalaTypes) GetEnumAllowingAliasVar() ScalaTypes_EnumAllowingAlias {
	if m != nil {
		return m.EnumAllowingAliasVar
	}
	return ScalaTypes_UNKNOWN
}

func (m *ScalaTypes) GetEnumNotAllowingAliasVar() ScalaTypes_EnumNotAllowingAlias {
	if m != nil {
		return m.EnumNotAllowingAliasVar
	}
	return ScalaTypes_UNKNOWNTYPE
}

// _MessageType_._EnumType_.
type UseEnumtype struct {
	Enumtype1            ScalaTypes_EnumAllowingAlias `protobuf:"varint,1,opt,name=enumtype1,proto3,enum=explains.ScalaTypes_EnumAllowingAlias" json:"enumtype1,omitempty"`
	Enmtype2             Global_EnumNotAllowingAlias  `protobuf:"varint,2,opt,name=enmtype2,proto3,enum=explains.Global_EnumNotAllowingAlias" json:"enmtype2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UseEnumtype) Reset()         { *m = UseEnumtype{} }
func (m *UseEnumtype) String() string { return proto.CompactTextString(m) }
func (*UseEnumtype) ProtoMessage()    {}
func (*UseEnumtype) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{1}
}
func (m *UseEnumtype) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UseEnumtype) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UseEnumtype.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UseEnumtype) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UseEnumtype.Merge(m, src)
}
func (m *UseEnumtype) XXX_Size() int {
	return m.Size()
}
func (m *UseEnumtype) XXX_DiscardUnknown() {
	xxx_messageInfo_UseEnumtype.DiscardUnknown(m)
}

var xxx_messageInfo_UseEnumtype proto.InternalMessageInfo

func (m *UseEnumtype) GetEnumtype1() ScalaTypes_EnumAllowingAlias {
	if m != nil {
		return m.Enumtype1
	}
	return ScalaTypes_UNKNOWN
}

func (m *UseEnumtype) GetEnmtype2() Global_EnumNotAllowingAlias {
	if m != nil {
		return m.Enmtype2
	}
	return Global_EnumNotAllowingAlias_Global_UNKNOWNTYPE
}

// SearchRespose 메세지에서 Result 라는 메세지를 사용함.
type SearchResponse struct {
	Results              []*Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{2}
}
func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type Result struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Snippets             []string `protobuf:"bytes,3,rep,name=snippets,proto3" json:"snippets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{3}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Result) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Result) GetSnippets() []string {
	if m != nil {
		return m.Snippets
	}
	return nil
}

// Nest 위의 방식과 다른점 살펴보자.
type SearchResponseNest struct {
	Results              []*SearchResponseNest_ResultNest `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SearchResponseNest) Reset()         { *m = SearchResponseNest{} }
func (m *SearchResponseNest) String() string { return proto.CompactTextString(m) }
func (*SearchResponseNest) ProtoMessage()    {}
func (*SearchResponseNest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{4}
}
func (m *SearchResponseNest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchResponseNest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResponseNest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchResponseNest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponseNest.Merge(m, src)
}
func (m *SearchResponseNest) XXX_Size() int {
	return m.Size()
}
func (m *SearchResponseNest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponseNest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponseNest proto.InternalMessageInfo

func (m *SearchResponseNest) GetResults() []*SearchResponseNest_ResultNest {
	if m != nil {
		return m.Results
	}
	return nil
}

type SearchResponseNest_ResultNest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Snippets             []string `protobuf:"bytes,3,rep,name=snippets,proto3" json:"snippets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResponseNest_ResultNest) Reset()         { *m = SearchResponseNest_ResultNest{} }
func (m *SearchResponseNest_ResultNest) String() string { return proto.CompactTextString(m) }
func (*SearchResponseNest_ResultNest) ProtoMessage()    {}
func (*SearchResponseNest_ResultNest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{4, 0}
}
func (m *SearchResponseNest_ResultNest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchResponseNest_ResultNest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResponseNest_ResultNest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchResponseNest_ResultNest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponseNest_ResultNest.Merge(m, src)
}
func (m *SearchResponseNest_ResultNest) XXX_Size() int {
	return m.Size()
}
func (m *SearchResponseNest_ResultNest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponseNest_ResultNest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponseNest_ResultNest proto.InternalMessageInfo

func (m *SearchResponseNest_ResultNest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SearchResponseNest_ResultNest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SearchResponseNest_ResultNest) GetSnippets() []string {
	if m != nil {
		return m.Snippets
	}
	return nil
}

type Outer struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outer) Reset()         { *m = Outer{} }
func (m *Outer) String() string { return proto.CompactTextString(m) }
func (*Outer) ProtoMessage()    {}
func (*Outer) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{5}
}
func (m *Outer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Outer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Outer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outer.Merge(m, src)
}
func (m *Outer) XXX_Size() int {
	return m.Size()
}
func (m *Outer) XXX_DiscardUnknown() {
	xxx_messageInfo_Outer.DiscardUnknown(m)
}

var xxx_messageInfo_Outer proto.InternalMessageInfo

type Outer_MiddleAA struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outer_MiddleAA) Reset()         { *m = Outer_MiddleAA{} }
func (m *Outer_MiddleAA) String() string { return proto.CompactTextString(m) }
func (*Outer_MiddleAA) ProtoMessage()    {}
func (*Outer_MiddleAA) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{5, 0}
}
func (m *Outer_MiddleAA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outer_MiddleAA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Outer_MiddleAA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Outer_MiddleAA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outer_MiddleAA.Merge(m, src)
}
func (m *Outer_MiddleAA) XXX_Size() int {
	return m.Size()
}
func (m *Outer_MiddleAA) XXX_DiscardUnknown() {
	xxx_messageInfo_Outer_MiddleAA.DiscardUnknown(m)
}

var xxx_messageInfo_Outer_MiddleAA proto.InternalMessageInfo

type Outer_MiddleAA_Inner struct {
	Ival                 int64    `protobuf:"varint,1,opt,name=ival,proto3" json:"ival,omitempty"`
	Booly                bool     `protobuf:"varint,2,opt,name=booly,proto3" json:"booly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outer_MiddleAA_Inner) Reset()         { *m = Outer_MiddleAA_Inner{} }
func (m *Outer_MiddleAA_Inner) String() string { return proto.CompactTextString(m) }
func (*Outer_MiddleAA_Inner) ProtoMessage()    {}
func (*Outer_MiddleAA_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{5, 0, 0}
}
func (m *Outer_MiddleAA_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outer_MiddleAA_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Outer_MiddleAA_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Outer_MiddleAA_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outer_MiddleAA_Inner.Merge(m, src)
}
func (m *Outer_MiddleAA_Inner) XXX_Size() int {
	return m.Size()
}
func (m *Outer_MiddleAA_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_Outer_MiddleAA_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_Outer_MiddleAA_Inner proto.InternalMessageInfo

func (m *Outer_MiddleAA_Inner) GetIval() int64 {
	if m != nil {
		return m.Ival
	}
	return 0
}

func (m *Outer_MiddleAA_Inner) GetBooly() bool {
	if m != nil {
		return m.Booly
	}
	return false
}

type Outer_MiddleBB struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outer_MiddleBB) Reset()         { *m = Outer_MiddleBB{} }
func (m *Outer_MiddleBB) String() string { return proto.CompactTextString(m) }
func (*Outer_MiddleBB) ProtoMessage()    {}
func (*Outer_MiddleBB) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{5, 1}
}
func (m *Outer_MiddleBB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outer_MiddleBB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Outer_MiddleBB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Outer_MiddleBB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outer_MiddleBB.Merge(m, src)
}
func (m *Outer_MiddleBB) XXX_Size() int {
	return m.Size()
}
func (m *Outer_MiddleBB) XXX_DiscardUnknown() {
	xxx_messageInfo_Outer_MiddleBB.DiscardUnknown(m)
}

var xxx_messageInfo_Outer_MiddleBB proto.InternalMessageInfo

type Outer_MiddleBB_Inner struct {
	Ival                 int32    `protobuf:"varint,1,opt,name=ival,proto3" json:"ival,omitempty"`
	Booly                bool     `protobuf:"varint,2,opt,name=booly,proto3" json:"booly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outer_MiddleBB_Inner) Reset()         { *m = Outer_MiddleBB_Inner{} }
func (m *Outer_MiddleBB_Inner) String() string { return proto.CompactTextString(m) }
func (*Outer_MiddleBB_Inner) ProtoMessage()    {}
func (*Outer_MiddleBB_Inner) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe045f5b93380b3b, []int{5, 1, 0}
}
func (m *Outer_MiddleBB_Inner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Outer_MiddleBB_Inner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Outer_MiddleBB_Inner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Outer_MiddleBB_Inner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outer_MiddleBB_Inner.Merge(m, src)
}
func (m *Outer_MiddleBB_Inner) XXX_Size() int {
	return m.Size()
}
func (m *Outer_MiddleBB_Inner) XXX_DiscardUnknown() {
	xxx_messageInfo_Outer_MiddleBB_Inner.DiscardUnknown(m)
}

var xxx_messageInfo_Outer_MiddleBB_Inner proto.InternalMessageInfo

func (m *Outer_MiddleBB_Inner) GetIval() int32 {
	if m != nil {
		return m.Ival
	}
	return 0
}

func (m *Outer_MiddleBB_Inner) GetBooly() bool {
	if m != nil {
		return m.Booly
	}
	return false
}

func init() {
	proto.RegisterEnum("explains.Global_EnumNotAllowingAlias", Global_EnumNotAllowingAlias_name, Global_EnumNotAllowingAlias_value)
	proto.RegisterEnum("explains.Foo", Foo_name, Foo_value)
	proto.RegisterEnum("explains.ScalaTypes_EnumAllowingAlias", ScalaTypes_EnumAllowingAlias_name, ScalaTypes_EnumAllowingAlias_value)
	proto.RegisterEnum("explains.ScalaTypes_EnumNotAllowingAlias", ScalaTypes_EnumNotAllowingAlias_name, ScalaTypes_EnumNotAllowingAlias_value)
	proto.RegisterType((*ScalaTypes)(nil), "explains.scala_types")
	proto.RegisterType((*UseEnumtype)(nil), "explains.use_enumtype")
	proto.RegisterType((*SearchResponse)(nil), "explains.SearchResponse")
	proto.RegisterType((*Result)(nil), "explains.Result")
	proto.RegisterType((*SearchResponseNest)(nil), "explains.SearchResponseNest")
	proto.RegisterType((*SearchResponseNest_ResultNest)(nil), "explains.SearchResponseNest.ResultNest")
	proto.RegisterType((*Outer)(nil), "explains.Outer")
	proto.RegisterType((*Outer_MiddleAA)(nil), "explains.Outer.MiddleAA")
	proto.RegisterType((*Outer_MiddleAA_Inner)(nil), "explains.Outer.MiddleAA.Inner")
	proto.RegisterType((*Outer_MiddleBB)(nil), "explains.Outer.MiddleBB")
	proto.RegisterType((*Outer_MiddleBB_Inner)(nil), "explains.Outer.MiddleBB.Inner")
}

func init() { proto.RegisterFile("examples/explains.proto", fileDescriptor_fe045f5b93380b3b) }

var fileDescriptor_fe045f5b93380b3b = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xce, 0xc4, 0xf9, 0x19, 0x1f, 0xa7, 0x89, 0x3b, 0x0a, 0x34, 0xa4, 0x6a, 0x18, 0x2c, 0x21,
	0x46, 0xb9, 0x08, 0x6a, 0xb6, 0xaa, 0xb8, 0x00, 0x24, 0x47, 0xa4, 0x55, 0x05, 0x75, 0x56, 0xd3,
	0xdd, 0x22, 0x10, 0x52, 0xe4, 0x6c, 0xa6, 0xbb, 0x96, 0x1c, 0x3b, 0xf2, 0xd8, 0x65, 0xf3, 0x00,
	0xbc, 0x43, 0x5f, 0x01, 0x9e, 0x84, 0x4b, 0x1e, 0x01, 0x2d, 0xef, 0x41, 0x90, 0xc7, 0x8e, 0x9d,
	0x6d, 0xc2, 0x4a, 0x48, 0xdc, 0x9d, 0xf3, 0x7d, 0xe7, 0xfb, 0xce, 0xf1, 0x19, 0x8f, 0x06, 0x1e,
	0x88, 0x6b, 0x77, 0xb5, 0xf6, 0x85, 0xfc, 0x5c, 0x5c, 0xaf, 0x7d, 0xd7, 0x0b, 0xe4, 0x68, 0x1d,
	0x85, 0x71, 0x48, 0xf0, 0x2e, 0xb7, 0xfe, 0xae, 0x83, 0x21, 0x2f, 0x5c, 0xdf, 0x9d, 0xc7, 0x9b,
	0xb5, 0x90, 0xe4, 0x11, 0xc0, 0x32, 0x4c, 0x16, 0xbe, 0x98, 0xbf, 0x75, 0xa3, 0x1e, 0xa2, 0x88,
	0x21, 0xae, 0x67, 0xc8, 0x6b, 0x37, 0x22, 0x0f, 0x41, 0x7f, 0xe3, 0x87, 0x6e, 0xac, 0xd8, 0x2a,
	0x45, 0xac, 0xca, 0xb1, 0x02, 0x72, 0xd2, 0x0b, 0xe2, 0x93, 0xb1, 0x22, 0x35, 0x8a, 0x58, 0x9d,
	0x63, 0x05, 0x94, 0xe4, 0xd3, 0x27, 0x8a, 0xac, 0x51, 0xc4, 0x34, 0x45, 0x3e, 0x7d, 0x92, 0x92,
	0x8f, 0x00, 0x92, 0x52, 0x5a, 0xa7, 0x88, 0xdd, 0xe3, 0x7a, 0x52, 0x68, 0x73, 0x3a, 0x17, 0x37,
	0x28, 0x62, 0xb5, 0x8c, 0x2e, 0xd4, 0xb2, 0x54, 0x37, 0x29, 0x62, 0xf7, 0xb9, 0x2e, 0x0b, 0xf5,
	0xc7, 0x60, 0xbc, 0xf1, 0xae, 0xc5, 0x32, 0xe7, 0x31, 0x45, 0xac, 0xc9, 0x21, 0x87, 0xf6, 0x0b,
	0x72, 0x7f, 0x9d, 0x22, 0xd6, 0xc8, 0x0b, 0xb2, 0x06, 0x9f, 0x40, 0x4b, 0xee, 0x5b, 0x00, 0x45,
	0xac, 0xc3, 0x0d, 0xb9, 0xe7, 0x51, 0x94, 0xe4, 0x26, 0x06, 0x45, 0xcc, 0xdc, 0x95, 0x64, 0x2e,
	0x1f, 0x01, 0x5e, 0x84, 0xa1, 0xaf, 0xe8, 0x16, 0x45, 0x0c, 0xf3, 0x66, 0x9a, 0xef, 0xbe, 0x20,
	0x8e, 0xbc, 0xe0, 0x52, 0x91, 0xf7, 0x28, 0x62, 0x3a, 0xd7, 0x33, 0x24, 0xdf, 0xdd, 0x62, 0x13,
	0x0b, 0xa9, 0xd8, 0x36, 0x45, 0xac, 0xc5, 0xb1, 0x02, 0x52, 0xf2, 0x27, 0xf8, 0x60, 0x1a, 0x24,
	0x2b, 0xdb, 0xf7, 0xc3, 0x9f, 0xbd, 0xe0, 0xd2, 0xf6, 0x3d, 0x37, 0x2b, 0xec, 0x50, 0xc4, 0xda,
	0xe3, 0xcf, 0x46, 0xc5, 0xd9, 0xef, 0x9d, 0xf3, 0xe8, 0x40, 0xc2, 0xbb, 0x07, 0x50, 0xea, 0x2e,
	0xa0, 0x97, 0xe2, 0x4e, 0x18, 0x1f, 0x36, 0x30, 0x55, 0x83, 0xe1, 0xbf, 0x37, 0x78, 0x5f, 0xc5,
	0x1f, 0x1c, 0x43, 0x5f, 0xbb, 0x91, 0xf5, 0x35, 0xdc, 0x3f, 0x68, 0x4f, 0x0c, 0x68, 0x9e, 0x3b,
	0xdf, 0x3a, 0xb3, 0xef, 0x1d, 0xb3, 0x92, 0x26, 0xaf, 0xce, 0x6c, 0x7e, 0x36, 0xfd, 0xc6, 0x44,
	0x69, 0xc2, 0xcf, 0x1d, 0xe7, 0x85, 0xf3, 0xdc, 0x44, 0xfd, 0xaa, 0x89, 0xac, 0x2f, 0xa0, 0x7b,
	0xcc, 0x9a, 0x74, 0xc0, 0xc8, 0x2d, 0xce, 0x7e, 0x38, 0x9d, 0x9a, 0x95, 0x14, 0xc8, 0x6d, 0x14,
	0x80, 0xac, 0x77, 0x08, 0x5a, 0x89, 0x14, 0x73, 0x11, 0x24, 0xab, 0x74, 0x72, 0x32, 0x05, 0x7d,
	0x17, 0x3f, 0x56, 0x17, 0xe0, 0x3f, 0xec, 0xb0, 0x54, 0x12, 0x1b, 0xb0, 0x08, 0x54, 0x3c, 0x56,
	0x17, 0xa5, 0x3d, 0xfe, 0xb4, 0x74, 0x79, 0xee, 0x87, 0x0b, 0xd7, 0x9f, 0x1f, 0xdd, 0x51, 0x21,
	0xb3, 0xbe, 0x84, 0xf6, 0x2b, 0xe1, 0x46, 0x17, 0x57, 0x5c, 0xc8, 0x75, 0x18, 0x48, 0x41, 0x86,
	0xd0, 0x8c, 0x84, 0x4c, 0xfc, 0x58, 0xf6, 0x10, 0xd5, 0x98, 0x31, 0x36, 0x4b, 0x4f, 0xae, 0x08,
	0xbe, 0x2b, 0xb0, 0xbe, 0x83, 0x46, 0x06, 0x11, 0x13, 0xb4, 0x24, 0xf2, 0xd5, 0xb7, 0xe8, 0x3c,
	0x0d, 0x49, 0x17, 0xea, 0xb1, 0x17, 0xfb, 0x42, 0x4d, 0xa6, 0xf3, 0x2c, 0x21, 0x7d, 0xc0, 0x32,
	0xf0, 0xd6, 0x6b, 0x11, 0xcb, 0x9e, 0x46, 0x35, 0xa6, 0xf3, 0x22, 0xb7, 0x7e, 0x45, 0x40, 0x6e,
	0x0f, 0xe3, 0x08, 0x19, 0x13, 0xfb, 0xfd, 0x81, 0xf6, 0x56, 0x75, 0x58, 0x9e, 0xcf, 0x98, 0x86,
	0xc5, 0x9c, 0xfd, 0x53, 0x80, 0x12, 0xfe, 0x5f, 0x66, 0xfd, 0x05, 0x41, 0x7d, 0x96, 0xc4, 0x22,
	0xea, 0x7f, 0x05, 0xf8, 0xa5, 0xb7, 0x5c, 0xfa, 0xc2, 0xb6, 0xfb, 0x8f, 0xa1, 0xfe, 0x22, 0x08,
	0x44, 0x44, 0x08, 0xd4, 0xbc, 0xb7, 0x6e, 0xd6, 0x43, 0xe3, 0x2a, 0x4e, 0x9b, 0xa4, 0x77, 0x71,
	0xa3, 0x9a, 0x60, 0x9e, 0x25, 0xa5, 0x7c, 0x32, 0x39, 0x2e, 0xaf, 0xdf, 0x25, 0x1f, 0xbe, 0x84,
	0x87, 0x77, 0x1c, 0x34, 0xf9, 0x10, 0x48, 0x4e, 0xdf, 0xfe, 0x45, 0x4b, 0xfc, 0xd6, 0x9f, 0x3a,
	0x3c, 0x01, 0xed, 0x59, 0x18, 0x92, 0x06, 0x54, 0xcf, 0x4f, 0xcd, 0x8a, 0x55, 0xc3, 0x55, 0xb3,
	0x6a, 0xd5, 0x70, 0xc7, 0xec, 0x58, 0x35, 0xac, 0x9b, 0x86, 0x85, 0x31, 0x33, 0xb7, 0xdb, 0xed,
	0xb6, 0x39, 0xd4, 0x9e, 0xcd, 0x66, 0x43, 0x6d, 0x62, 0xf3, 0xc9, 0xf4, 0xf7, 0x9b, 0x01, 0xfa,
	0xe3, 0x66, 0x80, 0xfe, 0xbc, 0x19, 0xa0, 0x77, 0x7f, 0x0d, 0x2a, 0xd0, 0xbd, 0x08, 0x57, 0xa3,
	0x4b, 0x2f, 0xbe, 0x4a, 0x16, 0x23, 0x29, 0xc2, 0xcd, 0x95, 0x2b, 0xbc, 0x60, 0x52, 0xbc, 0x08,
	0x3f, 0x16, 0xd1, 0x6f, 0xd5, 0x22, 0x5c, 0x34, 0xd4, 0xbb, 0x71, 0xf2, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0xf0, 0xc6, 0x4d, 0x52, 0x06, 0x00, 0x00,
}

func (m *ScalaTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScalaTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalaTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EnumNotAllowingAliasVar != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.EnumNotAllowingAliasVar))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.EnumAllowingAliasVar != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.EnumAllowingAliasVar))
		i--
		dAtA[i] = 0x78
	}
	if len(m.BytesVar) > 0 {
		i -= len(m.BytesVar)
		copy(dAtA[i:], m.BytesVar)
		i = encodeVarintExplains(dAtA, i, uint64(len(m.BytesVar)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.StringVar) > 0 {
		i -= len(m.StringVar)
		copy(dAtA[i:], m.StringVar)
		i = encodeVarintExplains(dAtA, i, uint64(len(m.StringVar)))
		i--
		dAtA[i] = 0x6a
	}
	if m.BoolVar {
		i--
		if m.BoolVar {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Sfixed64Var != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sfixed64Var))
		i--
		dAtA[i] = 0x59
	}
	if m.Sfixed32Var != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sfixed32Var))
		i--
		dAtA[i] = 0x55
	}
	if m.Fixed64Var != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Fixed64Var))
		i--
		dAtA[i] = 0x49
	}
	if m.Fixed32Var != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Fixed32Var))
		i--
		dAtA[i] = 0x45
	}
	if m.Sint32Var != 0 {
		i = encodeVarintExplains(dAtA, i, uint64((uint32(m.Sint32Var)<<1)^uint32((m.Sint32Var>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.Uint64Var != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.Uint64Var))
		i--
		dAtA[i] = 0x30
	}
	if m.Uint32Var != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.Uint32Var))
		i--
		dAtA[i] = 0x28
	}
	if m.Int64Var != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.Int64Var))
		i--
		dAtA[i] = 0x20
	}
	if m.Int32Var != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.Int32Var))
		i--
		dAtA[i] = 0x18
	}
	if m.FloatVar != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatVar))))
		i--
		dAtA[i] = 0x15
	}
	if m.DoubleVar != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleVar))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *UseEnumtype) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseEnumtype) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UseEnumtype) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enmtype2 != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.Enmtype2))
		i--
		dAtA[i] = 0x10
	}
	if m.Enumtype1 != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.Enumtype1))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplains(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Snippets) > 0 {
		for iNdEx := len(m.Snippets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Snippets[iNdEx])
			copy(dAtA[i:], m.Snippets[iNdEx])
			i = encodeVarintExplains(dAtA, i, uint64(len(m.Snippets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintExplains(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintExplains(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchResponseNest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResponseNest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchResponseNest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExplains(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchResponseNest_ResultNest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResponseNest_ResultNest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchResponseNest_ResultNest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Snippets) > 0 {
		for iNdEx := len(m.Snippets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Snippets[iNdEx])
			copy(dAtA[i:], m.Snippets[iNdEx])
			i = encodeVarintExplains(dAtA, i, uint64(len(m.Snippets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintExplains(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintExplains(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Outer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Outer_MiddleAA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outer_MiddleAA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outer_MiddleAA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Outer_MiddleAA_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outer_MiddleAA_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outer_MiddleAA_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Booly {
		i--
		if m.Booly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Ival != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.Ival))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Outer_MiddleBB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outer_MiddleBB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outer_MiddleBB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Outer_MiddleBB_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outer_MiddleBB_Inner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Outer_MiddleBB_Inner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Booly {
		i--
		if m.Booly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Ival != 0 {
		i = encodeVarintExplains(dAtA, i, uint64(m.Ival))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExplains(dAtA []byte, offset int, v uint64) int {
	offset -= sovExplains(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScalaTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoubleVar != 0 {
		n += 9
	}
	if m.FloatVar != 0 {
		n += 5
	}
	if m.Int32Var != 0 {
		n += 1 + sovExplains(uint64(m.Int32Var))
	}
	if m.Int64Var != 0 {
		n += 1 + sovExplains(uint64(m.Int64Var))
	}
	if m.Uint32Var != 0 {
		n += 1 + sovExplains(uint64(m.Uint32Var))
	}
	if m.Uint64Var != 0 {
		n += 1 + sovExplains(uint64(m.Uint64Var))
	}
	if m.Sint32Var != 0 {
		n += 1 + sozExplains(uint64(m.Sint32Var))
	}
	if m.Fixed32Var != 0 {
		n += 5
	}
	if m.Fixed64Var != 0 {
		n += 9
	}
	if m.Sfixed32Var != 0 {
		n += 5
	}
	if m.Sfixed64Var != 0 {
		n += 9
	}
	if m.BoolVar {
		n += 2
	}
	l = len(m.StringVar)
	if l > 0 {
		n += 1 + l + sovExplains(uint64(l))
	}
	l = len(m.BytesVar)
	if l > 0 {
		n += 1 + l + sovExplains(uint64(l))
	}
	if m.EnumAllowingAliasVar != 0 {
		n += 1 + sovExplains(uint64(m.EnumAllowingAliasVar))
	}
	if m.EnumNotAllowingAliasVar != 0 {
		n += 2 + sovExplains(uint64(m.EnumNotAllowingAliasVar))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UseEnumtype) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enumtype1 != 0 {
		n += 1 + sovExplains(uint64(m.Enumtype1))
	}
	if m.Enmtype2 != 0 {
		n += 1 + sovExplains(uint64(m.Enmtype2))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovExplains(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovExplains(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovExplains(uint64(l))
	}
	if len(m.Snippets) > 0 {
		for _, s := range m.Snippets {
			l = len(s)
			n += 1 + l + sovExplains(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchResponseNest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovExplains(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchResponseNest_ResultNest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovExplains(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovExplains(uint64(l))
	}
	if len(m.Snippets) > 0 {
		for _, s := range m.Snippets {
			l = len(s)
			n += 1 + l + sovExplains(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Outer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Outer_MiddleAA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Outer_MiddleAA_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ival != 0 {
		n += 1 + sovExplains(uint64(m.Ival))
	}
	if m.Booly {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Outer_MiddleBB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Outer_MiddleBB_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ival != 0 {
		n += 1 + sovExplains(uint64(m.Ival))
	}
	if m.Booly {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExplains(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExplains(x uint64) (n int) {
	return sovExplains(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScalaTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: scala_types: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: scala_types: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleVar", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoubleVar = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatVar", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FloatVar = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Var", wireType)
			}
			m.Int32Var = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32Var |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Var", wireType)
			}
			m.Int64Var = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64Var |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Var", wireType)
			}
			m.Uint32Var = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32Var |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Var", wireType)
			}
			m.Uint64Var = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64Var |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32Var", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sint32Var = v
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32Var", wireType)
			}
			m.Fixed32Var = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixed32Var = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64Var", wireType)
			}
			m.Fixed64Var = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixed64Var = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32Var", wireType)
			}
			m.Sfixed32Var = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sfixed32Var = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64Var", wireType)
			}
			m.Sfixed64Var = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sfixed64Var = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVar", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolVar = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringVar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringVar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesVar", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesVar = append(m.BytesVar[:0], dAtA[iNdEx:postIndex]...)
			if m.BytesVar == nil {
				m.BytesVar = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumAllowingAliasVar", wireType)
			}
			m.EnumAllowingAliasVar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnumAllowingAliasVar |= ScalaTypes_EnumAllowingAlias(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumNotAllowingAliasVar", wireType)
			}
			m.EnumNotAllowingAliasVar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnumNotAllowingAliasVar |= ScalaTypes_EnumNotAllowingAlias(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseEnumtype) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: use_enumtype: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: use_enumtype: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enumtype1", wireType)
			}
			m.Enumtype1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enumtype1 |= ScalaTypes_EnumAllowingAlias(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enmtype2", wireType)
			}
			m.Enmtype2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enmtype2 |= Global_EnumNotAllowingAlias(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &Result{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snippets = append(m.Snippets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResponseNest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResponseNest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResponseNest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &SearchResponseNest_ResultNest{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResponseNest_ResultNest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultNest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultNest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExplains
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExplains
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snippets = append(m.Snippets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Outer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Outer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outer_MiddleAA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiddleAA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiddleAA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outer_MiddleAA_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ival", wireType)
			}
			m.Ival = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ival |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Booly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Booly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outer_MiddleBB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiddleBB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiddleBB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outer_MiddleBB_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ival", wireType)
			}
			m.Ival = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ival |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Booly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Booly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExplains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExplains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExplains(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExplains
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExplains
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExplains
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExplains
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExplains
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExplains        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExplains          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExplains = fmt.Errorf("proto: unexpected end of group")
)
